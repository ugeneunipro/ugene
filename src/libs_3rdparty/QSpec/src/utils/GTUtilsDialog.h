/**
 * UGENE - Integrated Bioinformatics Tools.
 * Copyright (C) 2008-2017 UniPro <ugene@unipro.ru>
 * http://ugene.net
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 */

#ifndef _HI_GUI_DIALOG_UTILS_H_
#define _HI_GUI_DIALOG_UTILS_H_

#include <core/CustomScenario.h>

#include <QDialogButtonBox>
#include <QTimer>

#include "GTGlobals.h"

namespace HI {

class HI_EXPORT Runnable {
public:
    virtual void run() = 0;
    virtual ~Runnable() {
    }
};

class HI_EXPORT GUIDialogWaiter : public QObject {
    Q_OBJECT
public:
    enum class DialogType {
        Modal,
        Popup
    };
    struct WaitSettings {
        WaitSettings(const QString& _objectName = "",
                     const DialogType& _dialogType = DialogType::Modal,
                     int _timeout = 20000,
                     bool _isRandomOrderWaiter = false)
            : objectName(_objectName),
              dialogType(_dialogType),
              timeout(_timeout),
              isRandomOrderWaiter(_isRandomOrderWaiter) {
        }

        QString objectName;
        DialogType dialogType;
        int timeout;
        bool isRandomOrderWaiter = false;
    };

    GUIDialogWaiter(GUITestOpStatus& os, Runnable* _r, const WaitSettings& settings = WaitSettings());
    virtual ~GUIDialogWaiter();

    const WaitSettings& getSettings() const {
        return settings;
    }

    /** Unique waiter identified. Autogenerated. */
    int waiterId = -1;

    Runnable* getRunnable() const {
        return runnable;
    }

public slots:
    void checkDialog();

private:
    GUITestOpStatus& os;
    Runnable* runnable = nullptr;
    WaitSettings settings;

    QTimer timer;
    int waitingTime = 0;
};

class HI_EXPORT Filler : public Runnable {
public:
    Filler(GUITestOpStatus& os, const GUIDialogWaiter::WaitSettings& settings, CustomScenario* scenario = NULL);
    Filler(GUITestOpStatus& os, const QString& objectName, CustomScenario* scenario = NULL);
    ~Filler();

    GUIDialogWaiter::WaitSettings getSettings() const;
    void run() override;
    virtual void commonScenario() {
    }

protected:
    GUITestOpStatus& os;
    GUIDialogWaiter::WaitSettings settings;
    CustomScenario* scenario;

private:
    void releaseMouseButtons();
};

class HI_EXPORT GTUtilsDialog {
    friend class GUIDialogWaiter;
    friend class HangChecker;

public:
    enum class CleanupMode {
        FailOnUnfinished,
        NoFailOnUnfinished
    };

    static QDialogButtonBox* buttonBox(GUITestOpStatus& os, QWidget* dialog);

    static void clickButtonBox(GUITestOpStatus& os, QDialogButtonBox::StandardButton button);

    static void clickButtonBox(GUITestOpStatus& os, QWidget* dialog, QDialogButtonBox::StandardButton button);

    // if objectName is not empty, waits for QWidget with a given name
    static void waitForDialog(GUITestOpStatus& os, Runnable* r, const GUIDialogWaiter::WaitSettings& settings, bool isPrependToList = true);

    static void waitForDialog(GUITestOpStatus& os, Runnable* r, int timeout = 0, bool isRandomOrderWaiter = false, bool isPrependToList = true);

    /** Same as waitForDialog but adds waiter to the end of the current waiters list. */
    static void add(GUITestOpStatus& os, Runnable* r, const GUIDialogWaiter::WaitSettings& settings);

    /** Same as waitForDialog but adds waiter to the end of the current waiters list. */
    static void add(GUITestOpStatus& os, Runnable* r, int timeout = 0);

    /** Waits up to 'timeout' millis that all dialogs (runnables) are finished: the pool of GUIDialogWaiters is empty. */
    static void checkNoActiveWaiters(GUITestOpStatus& os, int timeoutMillis = 30000);

    static void removeRunnable(Runnable* runnable);

    /** Deletes all GUIDialogWaiters, sets err if there are unfinished waiters. */
    static void cleanup(GUITestOpStatus& os, const CleanupMode& cleanupMode);

private:
    static QList<GUIDialogWaiter*> waiterList;
    static const int timerPeriod = 100;
};

}  // namespace HI

#endif
